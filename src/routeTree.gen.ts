/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as SavedIndexRouteImport } from './routes/saved/index'
import { Route as Manga_searchIndexRouteImport } from './routes/manga_search/index'
import { Route as Manga_searchManga_nameIndexRouteImport } from './routes/manga_search/$manga_name/index'
import { Route as Manga_searchManga_nameChapterChapter_numIndexRouteImport } from './routes/manga_search/$manga_name/chapter/$chapter_num/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/test/index.lazy').then((d) => d.Route))
const SavedIndexRoute = SavedIndexRouteImport.update({
  id: '/saved/',
  path: '/saved/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/saved/index.lazy').then((d) => d.Route))
const Manga_searchIndexRoute = Manga_searchIndexRouteImport.update({
  id: '/manga_search/',
  path: '/manga_search/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/manga_search/index.lazy').then((d) => d.Route),
)
const Manga_searchManga_nameIndexRoute =
  Manga_searchManga_nameIndexRouteImport.update({
    id: '/manga_search/$manga_name/',
    path: '/manga_search/$manga_name/',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/manga_search/$manga_name/index.lazy').then((d) => d.Route),
  )
const Manga_searchManga_nameChapterChapter_numIndexRoute =
  Manga_searchManga_nameChapterChapter_numIndexRouteImport.update({
    id: '/manga_search/$manga_name/chapter/$chapter_num/',
    path: '/manga_search/$manga_name/chapter/$chapter_num/',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import(
      './routes/manga_search/$manga_name/chapter/$chapter_num/index.lazy'
    ).then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/manga_search': typeof Manga_searchIndexRoute
  '/saved': typeof SavedIndexRoute
  '/test': typeof TestIndexRoute
  '/manga_search/$manga_name': typeof Manga_searchManga_nameIndexRoute
  '/manga_search/$manga_name/chapter/$chapter_num': typeof Manga_searchManga_nameChapterChapter_numIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/manga_search': typeof Manga_searchIndexRoute
  '/saved': typeof SavedIndexRoute
  '/test': typeof TestIndexRoute
  '/manga_search/$manga_name': typeof Manga_searchManga_nameIndexRoute
  '/manga_search/$manga_name/chapter/$chapter_num': typeof Manga_searchManga_nameChapterChapter_numIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/manga_search/': typeof Manga_searchIndexRoute
  '/saved/': typeof SavedIndexRoute
  '/test/': typeof TestIndexRoute
  '/manga_search/$manga_name/': typeof Manga_searchManga_nameIndexRoute
  '/manga_search/$manga_name/chapter/$chapter_num/': typeof Manga_searchManga_nameChapterChapter_numIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/manga_search'
    | '/saved'
    | '/test'
    | '/manga_search/$manga_name'
    | '/manga_search/$manga_name/chapter/$chapter_num'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/manga_search'
    | '/saved'
    | '/test'
    | '/manga_search/$manga_name'
    | '/manga_search/$manga_name/chapter/$chapter_num'
  id:
    | '__root__'
    | '/'
    | '/manga_search/'
    | '/saved/'
    | '/test/'
    | '/manga_search/$manga_name/'
    | '/manga_search/$manga_name/chapter/$chapter_num/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Manga_searchIndexRoute: typeof Manga_searchIndexRoute
  SavedIndexRoute: typeof SavedIndexRoute
  TestIndexRoute: typeof TestIndexRoute
  Manga_searchManga_nameIndexRoute: typeof Manga_searchManga_nameIndexRoute
  Manga_searchManga_nameChapterChapter_numIndexRoute: typeof Manga_searchManga_nameChapterChapter_numIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/saved/': {
      id: '/saved/'
      path: '/saved'
      fullPath: '/saved'
      preLoaderRoute: typeof SavedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manga_search/': {
      id: '/manga_search/'
      path: '/manga_search'
      fullPath: '/manga_search'
      preLoaderRoute: typeof Manga_searchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manga_search/$manga_name/': {
      id: '/manga_search/$manga_name/'
      path: '/manga_search/$manga_name'
      fullPath: '/manga_search/$manga_name'
      preLoaderRoute: typeof Manga_searchManga_nameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manga_search/$manga_name/chapter/$chapter_num/': {
      id: '/manga_search/$manga_name/chapter/$chapter_num/'
      path: '/manga_search/$manga_name/chapter/$chapter_num'
      fullPath: '/manga_search/$manga_name/chapter/$chapter_num'
      preLoaderRoute: typeof Manga_searchManga_nameChapterChapter_numIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Manga_searchIndexRoute: Manga_searchIndexRoute,
  SavedIndexRoute: SavedIndexRoute,
  TestIndexRoute: TestIndexRoute,
  Manga_searchManga_nameIndexRoute: Manga_searchManga_nameIndexRoute,
  Manga_searchManga_nameChapterChapter_numIndexRoute:
    Manga_searchManga_nameChapterChapter_numIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
